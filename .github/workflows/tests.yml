name: Comprehensive Test Suite

on:
  workflow_dispatch:  # Umożliwia ręczne uruchomienie
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  code-review:
    name: Code Review
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup environment
        run: |
          # Instalacja narzędzi do code review
          npm install -g eslint prettier
      - name: Lint code
        run: eslint .
      - name: Check code formatting
        run: prettier --check .
      - name: Security scan
        run: |
          # Przykład użycia narzędzia do skanowania bezpieczeństwa
          npm install -g snyk
          snyk test

  functional-tests:
    name: Functional Tests
    runs-on: ubuntu-latest
    needs: code-review
    steps:
      - uses: actions/checkout@v3
      - name: Setup test environment
        run: |
          # Konfiguracja środowiska testowego
          npm install
      - name: Run functionality tests
        run: npm run test:functional
      - name: Run workflow tests
        run: npm run test:workflow
      - name: Run data validation tests
        run: npm run test:validation

  automated-tests:
    name: Automated Tests
    runs-on: ubuntu-latest
    needs: functional-tests
    steps:
      - uses: actions/checkout@v3
      - name: Setup test environment
        run: npm install
      - name: Run regression tests
        run: npm run test:regression
      - name: Run smoke tests
        run: npm run test:smoke
      - name: Run end-to-end tests
        run: npm run test:e2e

  ui-usability-tests:
    name: UI & Usability Tests
    runs-on: ubuntu-latest
    needs: code-review
    steps:
      - uses: actions/checkout@v3
      - name: Setup environment
        run: |
          npm install
          # Instalacja dodatkowych narzędzi do testów UI
          npm install -g puppeteer lighthouse
      - name: Run UI tests
        run: npm run test:ui
      - name: Run usability tests
        run: npm run test:usability
      - name: Run accessibility tests
        run: |
          npm run test:accessibility
          # Alternatywnie można użyć lighthouse
          lighthouse --accessibility --output=json --output-path=./accessibility-report.json http://localhost:3000

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [functional-tests, automated-tests]
    steps:
      - uses: actions/checkout@v3
      - name: Setup databases and services
        run: |
          # Konfiguracja baz danych dla testów (np. Docker)
          docker-compose up -d test-db
          # Konfiguracja mocków dla usług zewnętrznych
          npm install -g mockserver
          mockserver -p 8080
      - name: Run API tests
        run: npm run test:api
      - name: Run database tests
        run: npm run test:db
      - name: Run external services integration tests
        run: npm run test:external-integration

  report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [ui-usability-tests, integration-tests]
    steps:
      - uses: actions/checkout@v3
      - name: Collect test results
        run: |
          mkdir -p reports
          # Zbieranie raportów z innych zadań
          # Tutaj można dodać kod do pobierania artefaktów z innych zadań
      - name: Generate combined report
        run: |
          # Generowanie zbiorczego raportu
          echo "Tworzenie zbiorczego raportu testów"
      - name: Upload test reports
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: reports/
